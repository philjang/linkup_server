"""
Django settings for linkup_rest_api project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# .env configuration
from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())

# verify environment version
if os.getenv('ENV') == 'development':
    # use db name in .env
    DB_NAME = os.getenv('DB_NAME_DEV') # used in DATABASES section below

    DB = {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME
    }
    DEBUG = True # provides good error messages during dev
    # only allow locally running client at port 3000 for CORS
    CORS_ORIGIN_WHITELIST = ['http://localhost:3000']
else: 
    # use dj_database_url package if on production, on heroku
    DB = dj_database_url.config()
    DEBUG = False
    CORS_ORIGIN_WHITELIST = [
        os.getenv('CLIENT_ORIGIN')
    ]

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# CORS will still block any sites we do not allow
ALLOWED_HOSTS = ['*'] # like CORS but does not validate protocol (http/https/ftp/etc) or port


# Application definition

INSTALLED_APPS = [
    'discussions_api',
    'membership',
    'corsheaders', # to allow cross origin resource sharing
    'rest_framework', # for serializers
    'rest_framework.authtoken', # for auth token
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # makes CORS package run on all requests
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True # used for testing with postman

# entry point for project's urls.py 
ROOT_URLCONF = 'linkup_rest_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# standard deployment for python - how server and application talk to each other
WSGI_APPLICATION = 'linkup_rest_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': DB
}

# Django Rest Framework
# these can be overridden on individual views
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # sets up tokenauthentication by default - interacting with API will require a token to use a view
        'rest_framework.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # class used by default to validate token
        'rest_frameowrk.permissions.IsAuthenticated'
    ]
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

# I18N stands for internationalization (common term in UX community)
USE_I18N = True

# L10N stands for localization
USE_L10N = True # displays numbers and dates using format of current locale

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Use custom user model as the auth user for admin view
AUTH_USER_MODEL = 'membership.User'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
